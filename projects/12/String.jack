// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, capacity;
    field Array pointer;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let pointer = 0;
        } else {
            let pointer = Array.new(maxLength);
        }
        let length = 0;
        let capacity = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(pointer = null)) {
            do pointer.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < 0) {
            return null;
        }
        if ((j > length) | (j > length)) {
            return null;
        }
        return pointer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < 0) {
            return;
        }
        if (j > length) {
            return;
        }
        let pointer[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < capacity) {
            do setCharAt(length, c);
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(length = 0)) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int result, i;
        var char c;
        var bool isNegative;
        let i = 0;
        let result = 0;
        if (charAt(i) = 45) {
            let i = i + 1;
            let isNegative = true;
        }
        while (i < length) {
            let c = charAt(i);
            if ((c < 48) | (c > 57)) {
                let i = length;
            } else {
                let result = (result * 10) + (c - 48);
            }
            let i = i + 1;
        }
        if (isNegative) {
            let result = -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int divider, n;
        while (length > 0) {
            do eraseLastChar();
        }
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        let divider = 10000;
        while (~(divider = 0)) {
            let n = val / divider;
            do appendChar(n + 48);
            let val = val - (n * divider);
            let divider = divider / 10;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
