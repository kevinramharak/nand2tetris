// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array memory;
    static Array free;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        // initialize first LL node of heap
        let free = 2048;
        let free[0] = /* size */ 16000;
        let free[1] = /* next */ null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array previous, current, next, node;
        let previous = null;
        let next = null;
        let node = null;
        let current = free;
        while (~(current = null)) {
            let next = current[1];
            if (current[0] = size) {
                if (previous = null) {
                    let free = next;
                } else {
                    let previous[1] = next;
                }
                return current + 2;
            }
            if (current[0] > size) {
                let node = current + size + 2;
                let node[0] = current[0] - size - 2 - 2;
                let node[1] = next;
                if (previous = null) {
                    let free = node;
                } else {
                    let previous[1] = node;
                }
                let node = current;
                let node[0] = size;
                let node[1] = null;
                return node + 2;
            }
            let previous = current;
            let current = next;
        }
        // no memory available
        return null;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array previous, current, next, node;
        let node = o - 2;
        let previous = null;
        let next = null;
        let current = free;
        while (~(current = null)) {
            let next = current[1];
            if (node < current) {
                if (previous = null) {
                    let free = node;
                    let node[1] = current;
                } else {
                    let previous[1] = node;
                    let node[1] = current;
                }
            }
            let previous = current;
            let current = next;
        }
        return;
    }
}
