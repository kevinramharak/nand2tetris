
/** A generic class that can delegate to the correct (static) piece class based on the type of the piece */
class Piece {
    field int rowIndex, columnIndex;
    field bool isWhite;
    /**
        the type of the piece is represented by an enum:
        - 1 = pawn
        - 2 = knight
        - 3 = bishop
        - 4 = rook
        - 5 = queen
        - 6 = king
    */
    field int type;

    constructor Piece new(int _rowIndex, int _columnIndex, bool _isWhite, int _type) {
        let rowIndex = _rowIndex;
        let columnIndex = _columnIndex;
        let isWhite = _isWhite;
        let type = _type;
        return this;
    }

    method void dispose() {
        return;
    }

    method void setRowIndex(int _rowIndex) {
        let rowIndex = _rowIndex;
        return;
    }

    method void setColumnIndex(int _columnIndex) {
        let columnIndex = _columnIndex;
        return;
    }

    method bool getIsWhite() {
        return isWhite;
    }

    method int getType() {
        return type;
    }

    method void setType(int _type) {
        let type = _type;
        return;
    }

    method void draw(Board board) {
        var int offset, backgroundColor;
        let offset = board.calculateOffset(rowIndex, columnIndex);
        let backgroundColor = board.calculateColor(rowIndex, columnIndex);
        // TODO: does returns in each branch boost performance?
        // TODO: make sure draw functions do not bother writing -1 as the tile will already be black
        if (isWhite) {
            if (backgroundColor = 0) {
                if (type = 1) {
                    do Pawn.drawWhiteOnWhite(offset);
                }
                if (type = 2) {
                    do Knight.drawWhiteOnWhite(offset);
                }
                if (type = 3) {
                    do Bishop.drawWhiteOnWhite(offset);
                }
            } else {
                if (type = 1) {
                    do Pawn.drawWhiteOnBlack(offset);
                }
                if (type = 2) {
                    do Knight.drawWhiteOnBlack(offset);
                }
                if (type = 3) {
                    do Bishop.drawWhiteOnBlack(offset);
                }
            }
        } else {
            if (backgroundColor = 0) {
                if (type = 1) {
                    do Pawn.drawBlackOnWhite(offset);
                }
                if (type = 2) {
                    do Knight.drawBlackOnWhite(offset);
                }
                if (type = 3) {
                    do Bishop.drawBlackOnWhite(offset);
                }
            } else {
                if (type = 1) {
                    do Pawn.drawBlackOnBlack(offset);
                }
                if (type = 2) {
                    do Knight.drawBlackOnBlack(offset);
                }
                if (type = 3) {
                    do Bishop.drawBlackOnBlack(offset);
                }
            }
        }
        return;
    }

    method bool canMoveTo(Array pieces, Piece target, int targetRowIndex, int targetColumnIndex) {
        if (type = 1) {
            return Pawn.canMoveTo(pieces, target, targetRowIndex, targetColumnIndex, rowIndex, columnIndex, isWhite);
        }
        if (type = 3) {
            return Bishop.canMoveTo(pieces, target, targetRowIndex, targetColumnIndex, rowIndex, columnIndex, isWhite);
        }
        return false;
    }
}
