
class King {
    function bool canMoveTo(Array pieces, Piece target, int targetRowIndex, int targetColumnIndex, int rowIndex, int columnIndex, bool isWhite) {
        var int diff;
        var Array row;
        let diff = Util.abs(targetRowIndex - rowIndex);
        if (diff > 1) {
            return false;
        }
        let diff = Util.abs(targetColumnIndex - targetColumnIndex);
        if (diff > 1) {
            return false;
        }
        if (target = null) {
            return true;
        }
        // TODO: implement checking for check(mate)
        return ~(target.getIsWhite() = isWhite);
    }

    function void drawWhiteOnWhite(int initialOffset) {
        var int address;
        // TODO: this addition operation can be optimized
        let address = 16384 + initialOffset;
        // column 0
        do Memory.poke(address + 256, -16384);
        do Memory.poke(address + 288, 31744);
        do Memory.poke(address + 320, 4608);
        do Memory.poke(address + 352, 4608);
        do Memory.poke(address + 384, 25088);
        do Memory.poke(address + 416, 16896);
        do Memory.poke(address + 448, 3072);
        do Memory.poke(address + 480, 14336);
        do Memory.poke(address + 512, 8192);
        do Memory.poke(address + 544, 12288);
        do Memory.poke(address + 576, 4096);
        do Memory.poke(address + 608, 6144);
        do Memory.poke(address + 640, 2048);
        do Memory.poke(address + 672, 1024);
        do Memory.poke(address + 704, -512);
        // column 1
        do Memory.poke(address + 257, 3);
        do Memory.poke(address + 289, 62);
        do Memory.poke(address + 321, 72);
        do Memory.poke(address + 353, 72);
        do Memory.poke(address + 385, 70);
        do Memory.poke(address + 417, 34);
        do Memory.poke(address + 449, 16);
        do Memory.poke(address + 481, 28);
        do Memory.poke(address + 513, 4);
        do Memory.poke(address + 545, 12);
        do Memory.poke(address + 577, 8);
        do Memory.poke(address + 609, 24);
        do Memory.poke(address + 641, 16);
        do Memory.poke(address + 673, 32);
        do Memory.poke(address + 705, 127);
        return;
    }

    function void drawWhiteOnBlack(int initialOffset) {
        var int address;
        // TODO: this addition operation can be optimized
        let address = 16384 + initialOffset;
        // column 0
        do Memory.poke(address + 256, 31743);
        do Memory.poke(address + 288, 29695);
        do Memory.poke(address + 320, 5119);
        do Memory.poke(address + 352, 5119);
        do Memory.poke(address + 384, 29695);
        do Memory.poke(address + 416, 18431);
        do Memory.poke(address + 448, 20479);
        do Memory.poke(address + 480, 8191);
        do Memory.poke(address + 512, 8191);
        do Memory.poke(address + 544, 4095);
        do Memory.poke(address + 576, 4095);
        do Memory.poke(address + 608, 2047);
        do Memory.poke(address + 640, 2047);
        do Memory.poke(address + 672, 1023);
        do Memory.poke(address + 704, 511);
        // column 1
        do Memory.poke(address + 257, -34);
        do Memory.poke(address + 289, -50);
        do Memory.poke(address + 321, -56);
        do Memory.poke(address + 353, -56);
        do Memory.poke(address + 385, -50);
        do Memory.poke(address + 417, -30);
        do Memory.poke(address + 449, -14);
        do Memory.poke(address + 481, -8);
        do Memory.poke(address + 513, -8);
        do Memory.poke(address + 545, -16);
        do Memory.poke(address + 577, -16);
        do Memory.poke(address + 609, -32);
        do Memory.poke(address + 641, -32);
        do Memory.poke(address + 673, -64);
        do Memory.poke(address + 705, -128);
        return;
    }

    function void drawBlackOnWhite(int initialOffset) {
        var int address;
        // TODO: this addition operation can be optimized
        let address = 16384 + initialOffset;
        // column 0
        do Memory.poke(address + 256, -31744);
        do Memory.poke(address + 288, -29696);
        do Memory.poke(address + 320, -5120);
        do Memory.poke(address + 352, -5120);
        do Memory.poke(address + 384, -29696);
        do Memory.poke(address + 416, -18432);
        do Memory.poke(address + 448, -20480);
        do Memory.poke(address + 480, -8192);
        do Memory.poke(address + 512, -8192);
        do Memory.poke(address + 544, -4096);
        do Memory.poke(address + 576, -4096);
        do Memory.poke(address + 608, -2048);
        do Memory.poke(address + 640, -2048);
        do Memory.poke(address + 672, -1024);
        do Memory.poke(address + 704, -512);
        // column 1
        do Memory.poke(address + 257, 33);
        do Memory.poke(address + 289, 49);
        do Memory.poke(address + 321, 55);
        do Memory.poke(address + 353, 55);
        do Memory.poke(address + 385, 49);
        do Memory.poke(address + 417, 29);
        do Memory.poke(address + 449, 13);
        do Memory.poke(address + 481, 7);
        do Memory.poke(address + 513, 7);
        do Memory.poke(address + 545, 15);
        do Memory.poke(address + 577, 15);
        do Memory.poke(address + 609, 31);
        do Memory.poke(address + 641, 31);
        do Memory.poke(address + 673, 63);
        do Memory.poke(address + 705, 127);
        return;
    }

    function void drawBlackOnBlack(int initialOffset) {
        var int address;
        // TODO: this addition operation can be optimized
        let address = 16384 + initialOffset;
        // column 0
        do Memory.poke(address + 256, 16383);
        do Memory.poke(address + 288, -31745);
        do Memory.poke(address + 320, -4609);
        do Memory.poke(address + 352, -4609);
        do Memory.poke(address + 384, -25089);
        do Memory.poke(address + 416, -16897);
        do Memory.poke(address + 448, -3073);
        do Memory.poke(address + 480, -14337);
        do Memory.poke(address + 512, -8193);
        do Memory.poke(address + 544, -12289);
        do Memory.poke(address + 576, -4097);
        do Memory.poke(address + 608, -6145);
        do Memory.poke(address + 640, -2049);
        do Memory.poke(address + 672, -1025);
        do Memory.poke(address + 704, 511);
        // column 1
        do Memory.poke(address + 257, -4);
        do Memory.poke(address + 289, -63);
        do Memory.poke(address + 321, -73);
        do Memory.poke(address + 353, -73);
        do Memory.poke(address + 385, -71);
        do Memory.poke(address + 417, -35);
        do Memory.poke(address + 449, -17);
        do Memory.poke(address + 481, -29);
        do Memory.poke(address + 513, -5);
        do Memory.poke(address + 545, -13);
        do Memory.poke(address + 577, -9);
        do Memory.poke(address + 609, -25);
        do Memory.poke(address + 641, -17);
        do Memory.poke(address + 673, -33);
        do Memory.poke(address + 705, -128);
        return;
    }
}