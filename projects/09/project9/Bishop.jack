
class Bishop {
    function bool canMoveTo(Array pieces, Piece target, int targetRowIndex, int targetColumnIndex, int rowIndex, int columnIndex, bool isWhite) {
        var int i, j, iIncrement, jIncrement;
        var Array row;
        // cannot move vertically / horizontally
        if (targetRowIndex = rowIndex) {
            return false;
        }
        if (targetColumnIndex = columnIndex) {
            return false;
        }
        // moves should always have the same absolute difference between row and column indexes
        // if this is not true the move is not diagonally
        if (~(Util.abs(targetColumnIndex - columnIndex) = Util.abs(targetRowIndex - rowIndex))) {
            return false;
        }
        // TODO: if the path to the target is clear return true, else return false

        // setup the loop
        if (targetRowIndex > rowIndex) {
            let iIncrement = 1;
        } else {
            let iIncrement = -1;
        }
        if (targetColumnIndex > columnIndex) {
            let jIncrement = 1;
        } else {
            let jIncrement = -1;
        }
        let i = rowIndex + iIncrement;
        let j = columnIndex + jIncrement;

        while (~(i = targetRowIndex)) {
            let row = pieces[i];
            if (~(row[j] = null)) {
                return false;
            }
            let j = j + jIncrement;
            let i = i + iIncrement;
        }

        if (target = null) {
            return true;
        }

        return ~(target.getIsWhite() = isWhite);
    }

    function void drawWhiteOnWhite(int initialOffset) {
        var int address;
        // TODO: this addition operation can be optimized
        let address = 16384 + initialOffset;
        do Memory.poke(address + 256, ~32767);
        do Memory.poke(address + 288, 16384);
        do Memory.poke(address + 320, 8192);
        do Memory.poke(address + 352, 4096);
        do Memory.poke(address + 384, 4096);
        do Memory.poke(address + 416, 8192);
        do Memory.poke(address + 448, 16384);
        do Memory.poke(address + 480, 16384);
        do Memory.poke(address + 512, 16384);
        do Memory.poke(address + 544, 16384);
        do Memory.poke(address + 576, 16384);
        do Memory.poke(address + 608, 24576);
        do Memory.poke(address + 640, 4096);
        do Memory.poke(address + 672, 2048);
        do Memory.poke(address + 704, -1024);
        // column 1
        do Memory.poke(address + 257, 1);
        do Memory.poke(address + 289, 2);
        do Memory.poke(address + 321, 4);
        do Memory.poke(address + 353, 8);
        do Memory.poke(address + 385, 8);
        do Memory.poke(address + 417, 4);
        do Memory.poke(address + 449, 2);
        do Memory.poke(address + 481, 2);
        do Memory.poke(address + 513, 2);
        do Memory.poke(address + 545, 2);
        do Memory.poke(address + 577, 2);
        do Memory.poke(address + 609, 6);
        do Memory.poke(address + 641, 8);
        do Memory.poke(address + 673, 16);
        do Memory.poke(address + 705, 63);
        return;
    }

    function void drawWhiteOnBlack(int initialOffset) {
        var int address;
        // TODO: this addition operation can be optimized
        let address = 16384 + initialOffset;
        // column 0
        do Memory.poke(address + 256, 32767);
        do Memory.poke(address + 288, 16383);
        do Memory.poke(address + 320, 8191);
        do Memory.poke(address + 352, 4095);
        do Memory.poke(address + 384, 4095);
        do Memory.poke(address + 416, 8191);
        do Memory.poke(address + 448, 16383);
        do Memory.poke(address + 480, 16383);
        do Memory.poke(address + 512, 16383);
        do Memory.poke(address + 544, 16383);
        do Memory.poke(address + 576, 16383);
        do Memory.poke(address + 608, 8191);
        do Memory.poke(address + 640, 4095);
        do Memory.poke(address + 672, 2047);
        do Memory.poke(address + 704, 1023);
        // column 1
        do Memory.poke(address + 257, -2);
        do Memory.poke(address + 289, -4);
        do Memory.poke(address + 321, -8);
        do Memory.poke(address + 353, -16);
        do Memory.poke(address + 385, -16);
        do Memory.poke(address + 417, -8);
        do Memory.poke(address + 449, -4);
        do Memory.poke(address + 481, -4);
        do Memory.poke(address + 513, -4);
        do Memory.poke(address + 545, -4);
        do Memory.poke(address + 577, -4);
        do Memory.poke(address + 609, -8);
        do Memory.poke(address + 641, -16);
        do Memory.poke(address + 673, -32);
        do Memory.poke(address + 705, -64);
        return;
    }

    function void drawBlackOnWhite(int initialOffset) {
        var int address;
        // TODO: this addition operation can be optimized
        let address = 16384 + initialOffset;
        do Memory.poke(address + 256, ~32767);
        do Memory.poke(address + 288, -16384);
        do Memory.poke(address + 320, -8192);
        do Memory.poke(address + 352, -4096);
        do Memory.poke(address + 384, -4096);
        do Memory.poke(address + 416, -8192);
        do Memory.poke(address + 448, -16384);
        do Memory.poke(address + 480, -16384);
        do Memory.poke(address + 512, -16384);
        do Memory.poke(address + 544, -16384);
        do Memory.poke(address + 576, -16384);
        do Memory.poke(address + 608, -8192);
        do Memory.poke(address + 640, -4096);
        do Memory.poke(address + 672, -2048);
        do Memory.poke(address + 704, -1024);
        // column 1
        do Memory.poke(address + 257, 1);
        do Memory.poke(address + 289, 3);
        do Memory.poke(address + 321, 7);
        do Memory.poke(address + 353, 15);
        do Memory.poke(address + 385, 15);
        do Memory.poke(address + 417, 7);
        do Memory.poke(address + 449, 3);
        do Memory.poke(address + 481, 3);
        do Memory.poke(address + 513, 3);
        do Memory.poke(address + 545, 3);
        do Memory.poke(address + 577, 3);
        do Memory.poke(address + 609, 7);
        do Memory.poke(address + 641, 15);
        do Memory.poke(address + 673, 31);
        do Memory.poke(address + 705, 63);
        return;
    }

    function void drawBlackOnBlack(int initialOffset) {
        var int address;
        let address = 16384 + initialOffset;
        // column 0
        do Memory.poke(address + 256, 32767);
        do Memory.poke(address + 288, -16385);
        do Memory.poke(address + 320, -8193);
        do Memory.poke(address + 352, -4097);
        do Memory.poke(address + 384, -4097);
        do Memory.poke(address + 416, -24577);
        do Memory.poke(address + 448, -16385);
        do Memory.poke(address + 480, -16385);
        do Memory.poke(address + 512, -16385);
        do Memory.poke(address + 544, -16385);
        do Memory.poke(address + 576, -16385);
        do Memory.poke(address + 608, -24577);
        do Memory.poke(address + 640, -4097);
        do Memory.poke(address + 672, -2049);
        do Memory.poke(address + 704, 1023);
        // column 1
        do Memory.poke(address + 257, -2);
        do Memory.poke(address + 289, -3);
        do Memory.poke(address + 321, -5);
        do Memory.poke(address + 353, -9);
        do Memory.poke(address + 385, -9);
        do Memory.poke(address + 417, -7);
        do Memory.poke(address + 449, -3);
        do Memory.poke(address + 481, -3);
        do Memory.poke(address + 513, -3);
        do Memory.poke(address + 545, -3);
        do Memory.poke(address + 577, -3);
        do Memory.poke(address + 609, -7);
        do Memory.poke(address + 641, -9);
        do Memory.poke(address + 673, -17);
        do Memory.poke(address + 705, -64);
        return;
    }
}
